[{"D:\\React Study\\React\\salaryform\\src\\App.js":"1","D:\\React Study\\React\\salaryform\\src\\reportWebVitals.js":"2","D:\\React Study\\React\\salaryform\\src\\index.js":"3"},{"size":2681,"mtime":1606414302077,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1606230549060,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1606230549060,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"qjrs7a",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React Study\\React\\salaryform\\src\\App.js",["15"],"import bgimg from './asset/bgimg.jpg';\nimport './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const details = {\n    salary: 18300,\n    earning: 212.28,\n    fees: 21.23\n  }\n\n  const min = 500;\n  const max = 250000;\n  const earningDivisor = 86.20;\n  const feesDivisor = 861.98;\n\n  const [salaryDetail, salaryUpdate] = useState(details);\n\n  const inputChange = (e) =>{\n    var value = parseInt(e.target.value.replace(/,/g, ''));    \n    value = value > max ? max : value;    \n    const isNaN = !Number.isNaN(parseFloat(value));    \n    salaryUpdate({\n      salary: isNaN ? parseFloat(value) : 0,\n      earning: isNaN ? parseFloat(value / earningDivisor).toFixed(2) : 0,\n      fees: isNaN ? parseFloat(value / feesDivisor).toFixed(2) : 0\n    })\n  }\n\n  const handleChange = (e) => {\n    if(e.target.value.length > 1 && e.taget)\n    salaryUpdate({\n      salary: parseFloat(parseInt(e.target.value).replace(/,/g, '')),\n      earning: parseFloat((parseInt(e.target.value) / 12)).toFixed(2),\n      fees: parseFloat((parseInt(e.target.value) / 80)).toFixed(2)\n    })\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"img-section\" style={{ backgroundImage: `url(${bgimg}` }}>\n        <div>\n          <h1 className=\"big-heading\">Lending made easy</h1>\n          <p className=\"sub-heading\">Earn up to -1.16% a year across a wide range of P2P sites with investUP</p>\n          <div className=\"btn\">Get Started</div>\n        </div>\n      </div>\n      <div className=\"main-content\">\n        <div className=\"form-text\">\n          <div style={{ fontSize: \"37px\", textAlign: \"center\" }}>With<span className=\"highlight-text salary\">€<input min={min} max={max} value={salaryDetail.salary.toLocaleString()} onChange={(e)=>inputChange(e)}></input></span> your estimated earning cound be <span className=\"earnings highlight-text\">€-{salaryDetail.earning.toLocaleString()}</span> * per\n  year with fees of just <span className=\"highlight-text fees\">€-{salaryDetail.fees.toLocaleString()}</span> per year.\n  </div>\n          <p className=\"paragraph\">Estimated earnings are based on -1.16% per annum before tax any potential losses. As with most forms of investment, peer-to-peer lending carries a\n    degree of risk to your capital; In this case, if borrows were unable to repay your loans.</p>\n        </div>\n        <div className=\"range-value\">\n          <span className=\"start-value\">€ 500</span>\n          <input id=\"range\" type=\"range\" min={min} max={max} value={salaryDetail.salary} onChange={(e) => inputChange(e)} step=\"1\" />\n          <span className=\"end-value\">€ 250,000</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\React Study\\React\\salaryform\\src\\reportWebVitals.js",[],"D:\\React Study\\React\\salaryform\\src\\index.js",[],{"ruleId":"16","severity":1,"message":"17","line":31,"column":9,"nodeType":"18","messageId":"19","endLine":31,"endColumn":21},"no-unused-vars","'handleChange' is assigned a value but never used.","Identifier","unusedVar"]